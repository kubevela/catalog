# Code generated by KubeVela templates. DO NOT EDIT. Please edit the original cue file.
# Definition source cue file: vela-templates/definitions/internal/jupyter-notebook.cue
apiVersion: core.oam.dev/v1beta1
kind: ComponentDefinition
metadata:
  annotations:
    definition.oam.dev/description: Add jupyter notebook
  name: jupyter-notebook
  namespace: vela-system
spec:
  appliesToWorkloads:
    - deployments.apps
  schematic:
    cue:
      template: |
        output: {
        	apiVersion: "apps/v1"
        	kind:       "Deployment"
        	metadata: {
        		name:      context.name + "-jupyter"
        		namespace: context.namespace
        	}
        	spec: {
        		selector: matchLabels: "app.oam.dev/trait": context.name + "-jupyter"
        		template: {
        			metadata: labels: "app.oam.dev/trait": context.name + "-jupyter"
        			spec: {
        				containers: [
        					{
        						name:  "jupyter"
        						image: "jupyter/minimal-notebook:notebook-6.4.8"
        						ports: [
        							{
        								containerPort: 8888
        							},
        						]
        						command: ["start-notebook.sh"]
        						args: ["--NotebookApp.token=''"]
        						if parameter["cpu"] != _|_ {
        							resources: {
        								limits: cpu:   parameter.cpu
        								requests: cpu: parameter.cpu
        							}
        						}

        						if parameter["memory"] != _|_ {
        							resources: {
        								limits: memory:   parameter.memory
        								requests: memory: parameter.memory
        							}
        						}

        						if parameter["gpu"] != _|_ {
        							resources: {
        								limits: "nvidia.com/gpu":   parameter.gpu
        								requests: "nvidia.com/gpu": parameter.gpu
        							}
        						}

        						volumeMounts: [ for v in parameter.storage {
        							{
        								mountPath: "/home/jovyan" + v.mountPath
        								name:      v.name
        							}
        						}]
        					},
        				]
        				if parameter.storage != _|_ {
        					volumes: [ for v in parameter.storage {
        						{
        							name: v.name
        							persistentVolumeClaim: claimName: v.name
        						}
        					}]
        				}
        			}
        		}
        	}
        }
        outputs: jupyterService: {
        	apiVersion: "v1"
        	kind:       "Service"
        	metadata: {
        		name:      context.name
        		namespace: context.namespace
        	}
        	spec: {
        		selector: "app.oam.dev/trait": context.name + "-jupyter"
        		ports: [
        			{
        				port:       8888
        				targetPort: 8888
        			},
        		]
        		type: parameter.serviceType
        	}
        }
        parameter: {
        	// +usage=Specify what kind of Service you want. options: "ClusterIP","NodePort","LoadBalancer","ExternalName"
        	serviceType: *"ClusterIP" | "NodePort" | "LoadBalancer" | "ExternalName"
        	storage?: [...{
        		name:      string
        		mountPath: string
        	}]
        	// +usage=Number of CPU units for the service, like `0.5` (0.5 CPU core), `1` (1 CPU core)
        	cpu?: string
        	// +usage=Specifies the attributes of the memory resource required for the container.
        	memory?: string
        	// +usage=Specifies the attributes of the gpu resource required for the container.
        	gpu?: string
        }
  workload:
    type: autodetects.core.oam.dev
